{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nfunction FileUpload({\n  onUpload\n}) {\n  _s();\n  const [file, setFile] = useState(null);\n  const [uploadProgress, setUploadProgress] = useState(0); // Progress state\n  const [isUploading, setIsUploading] = useState(false); // Track upload status\n\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n  };\n  const handleUpload = async () => {\n    if (!file) return alert(\"Please select a file.\");\n\n    // Validate file type (only allow CSV or JSON)\n    const validTypes = [\"text/csv\", \"application/json\"];\n    if (!validTypes.includes(file.type)) {\n      return alert(\"Invalid file type. Please upload a CSV or JSON file.\");\n    }\n    setIsUploading(true); // Start uploading\n\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        },\n        onUploadProgress: progressEvent => {\n          const percent = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          setUploadProgress(percent);\n        }\n      });\n      console.log(\"Response from server:\", response);\n      if (response && response.data && response.data.message) {\n        alert(response.data.message); // Success message from backend\n      } else {\n        alert(\"File uploaded successfully.\");\n      }\n      setUploadProgress(0); // Reset progress\n      setFile(null); // Reset file input\n      onUpload(); // Refresh data\n    } catch (error) {\n      console.error(\"Upload error:\", error);\n      if (error.response) {\n        console.log(\"Error Response:\", error.response);\n        alert(`Error: ${error.response.data.message || \"Error uploading file.\"}`);\n      } else if (error.request) {\n        alert(\"No response received from the server. Please try again.\");\n      } else {\n        alert(\"Error uploading file.\");\n      }\n    } finally {\n      setIsUploading(false); // Reset uploading status\n    }\n  };\n}\n_s(FileUpload, \"ibg3LDGOa+uO+sak/F8BfOp5Ih0=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","axios","FileUpload","onUpload","_s","file","setFile","uploadProgress","setUploadProgress","isUploading","setIsUploading","handleFileChange","e","target","files","handleUpload","alert","validTypes","includes","type","formData","FormData","append","response","post","headers","onUploadProgress","progressEvent","percent","Math","round","loaded","total","console","log","data","message","error","request","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/bank-statement-analyser/mini-bank-statement-analyzer/frontend/src/components/FileUpload.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction FileUpload({ onUpload }) {\r\n    const [file, setFile] = useState(null);\r\n    const [uploadProgress, setUploadProgress] = useState(0); // Progress state\r\n    const [isUploading, setIsUploading] = useState(false); // Track upload status\r\n\r\n    const handleFileChange = (e) => {\r\n        setFile(e.target.files[0]);\r\n    };\r\n\r\n    const handleUpload = async () => {\r\n      if (!file) return alert(\"Please select a file.\");\r\n  \r\n      // Validate file type (only allow CSV or JSON)\r\n      const validTypes = [\"text/csv\", \"application/json\"];\r\n      if (!validTypes.includes(file.type)) {\r\n          return alert(\"Invalid file type. Please upload a CSV or JSON file.\");\r\n      }\r\n  \r\n      setIsUploading(true); // Start uploading\r\n  \r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n  \r\n      try {\r\n          const response = await axios.post(\"http://localhost:5000/api/upload\", formData, {\r\n              headers: { \"Content-Type\": \"multipart/form-data\" },\r\n              onUploadProgress: (progressEvent) => {\r\n                  const percent = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n                  setUploadProgress(percent);\r\n              },\r\n          });\r\n  \r\n          console.log(\"Response from server:\", response);\r\n  \r\n          if (response && response.data && response.data.message) {\r\n              alert(response.data.message); // Success message from backend\r\n          } else {\r\n              alert(\"File uploaded successfully.\");\r\n          }\r\n  \r\n          setUploadProgress(0); // Reset progress\r\n          setFile(null); // Reset file input\r\n          onUpload(); // Refresh data\r\n      } catch (error) {\r\n          console.error(\"Upload error:\", error);\r\n          if (error.response) {\r\n              console.log(\"Error Response:\", error.response);\r\n              alert(`Error: ${error.response.data.message || \"Error uploading file.\"}`);\r\n          } else if (error.request) {\r\n              alert(\"No response received from the server. Please try again.\");\r\n          } else {\r\n              alert(\"Error uploading file.\");\r\n          }\r\n      } finally {\r\n          setIsUploading(false); // Reset uploading status\r\n      }\r\n  };\r\n}  \r\n\r\nexport default FileUpload;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}