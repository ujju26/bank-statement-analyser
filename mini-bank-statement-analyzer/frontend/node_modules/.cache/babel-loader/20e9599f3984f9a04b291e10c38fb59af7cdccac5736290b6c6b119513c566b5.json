{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\bank-statement-analyser\\\\mini-bank-statement-analyzer\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { fetchTransactions, fetchSummary } from \"./api/index\";\nimport FileUpload from './components/FileUpload';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [summary, setSummary] = useState([]);\n  const [dataLoaded, setDataLoaded] = useState(false); // New state to track if data exists\n\n  const loadData = async () => {\n    try {\n      const transactionsData = await fetchTransactions();\n      const summaryData = await fetchSummary();\n      setTransactions(transactionsData.data);\n      setSummary(summaryData.data);\n      setDataLoaded(true); // Show transactions only after fetching\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  // Function to categorize transactions based on their category\n  const categorizeTransactions = () => {\n    return transactions.reduce((categories, transaction) => {\n      if (!categories[transaction.category]) {\n        categories[transaction.category] = [];\n      }\n      categories[transaction.category].push(transaction);\n      return categories;\n    }, {});\n  };\n\n  // Function to calculate the summary (total credits, total debits, net)\n  const calculateSummary = () => {\n    let totalCredits = 0;\n    let totalDebits = 0;\n    transactions.forEach(transaction => {\n      if (transaction.amount > 0) {\n        totalCredits += transaction.amount;\n      } else {\n        totalDebits += Math.abs(transaction.amount);\n      }\n    });\n    return {\n      totalCredits,\n      totalDebits,\n      net: totalCredits - totalDebits\n    };\n  };\n  const categorizedTransactions = categorizeTransactions();\n  const {\n    totalCredits,\n    totalDebits,\n    net\n  } = calculateSummary();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mini Bank Statement Analyzer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FileUpload, {\n      onUploadSuccess: loadData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), \" \", dataLoaded &&\n    /*#__PURE__*/\n    // Only show data after an upload\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Transactions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), Object.keys(categorizedTransactions).map(category => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: categorizedTransactions[category].map(t => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [t.description, \": $\", t.amount]\n          }, t.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 29\n        }, this)]\n      }, category, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Total Credits: $\", totalCredits]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Total Debits: $\", totalDebits]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Net: $\", net]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"Nrcy1rgdoq0Tix08wDprYU34nOg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","fetchTransactions","fetchSummary","FileUpload","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","transactions","setTransactions","summary","setSummary","dataLoaded","setDataLoaded","loadData","transactionsData","summaryData","data","error","console","categorizeTransactions","reduce","categories","transaction","category","push","calculateSummary","totalCredits","totalDebits","forEach","amount","Math","abs","net","categorizedTransactions","children","fileName","_jsxFileName","lineNumber","columnNumber","onUploadSuccess","Object","keys","map","t","description","id","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/bank-statement-analyser/mini-bank-statement-analyzer/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { fetchTransactions, fetchSummary } from \"./api/index\";\r\nimport FileUpload from './components/FileUpload'; \r\n\r\nfunction App() {\r\n    const [transactions, setTransactions] = useState([]);\r\n    const [summary, setSummary] = useState([]);\r\n    const [dataLoaded, setDataLoaded] = useState(false); // New state to track if data exists\r\n\r\n    const loadData = async () => {\r\n        try {\r\n            const transactionsData = await fetchTransactions();\r\n            const summaryData = await fetchSummary();\r\n            \r\n            setTransactions(transactionsData.data);\r\n            setSummary(summaryData.data);\r\n            setDataLoaded(true); // Show transactions only after fetching\r\n        } catch (error) {\r\n            console.error(\"Error fetching data:\", error);\r\n        }\r\n    };\r\n\r\n    // Function to categorize transactions based on their category\r\n    const categorizeTransactions = () => {\r\n        return transactions.reduce((categories, transaction) => {\r\n            if (!categories[transaction.category]) {\r\n                categories[transaction.category] = [];\r\n            }\r\n            categories[transaction.category].push(transaction);\r\n            return categories;\r\n        }, {});\r\n    };\r\n\r\n    // Function to calculate the summary (total credits, total debits, net)\r\n    const calculateSummary = () => {\r\n        let totalCredits = 0;\r\n        let totalDebits = 0;\r\n\r\n        transactions.forEach((transaction) => {\r\n            if (transaction.amount > 0) {\r\n                totalCredits += transaction.amount;\r\n            } else {\r\n                totalDebits += Math.abs(transaction.amount);\r\n            }\r\n        });\r\n\r\n        return {\r\n            totalCredits,\r\n            totalDebits,\r\n            net: totalCredits - totalDebits,\r\n        };\r\n    };\r\n\r\n    const categorizedTransactions = categorizeTransactions();\r\n    const { totalCredits, totalDebits, net } = calculateSummary();\r\n\r\n    return (\r\n        <div>\r\n            <h1>Mini Bank Statement Analyzer</h1>\r\n            <FileUpload onUploadSuccess={loadData} /> {/* Trigger loadData after upload */}\r\n            \r\n            {dataLoaded && ( // Only show data after an upload\r\n                <>\r\n                    <h2>Transactions</h2>\r\n                    {Object.keys(categorizedTransactions).map((category) => (\r\n                        <div key={category}>\r\n                            <h3>{category}</h3>\r\n                            <ul>\r\n                                {categorizedTransactions[category].map((t) => (\r\n                                    <li key={t.id}>\r\n                                        {t.description}: ${t.amount}\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                    ))}\r\n\r\n                    <h2>Summary</h2>\r\n                    <ul>\r\n                        <li>Total Credits: ${totalCredits}</li>\r\n                        <li>Total Debits: ${totalDebits}</li>\r\n                        <li>Net: ${net}</li>\r\n                    </ul>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}